###################################### Image ######################################
ARG DISTRIBUTION=ubuntu
ARG VERSION=latest

## build Image
FROM wakemeops/${DISTRIBUTION}:${VERSION}

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# default packages to install
RUN apt-get update && \
    install_packages \
    apt-utils \
    software-properties-common \
    curl \
    wget \
    jq \
    unzip \
    vim \
    less \
    git \
    bash-completion \
    findutils \
    python3\
    python3-pip && \
    apt-get clean all

###################################### Tools ######################################
ARG WORKDIR=/root
ARG PACKAGES
ARG REPOSITORIES
ARG BINARIES

ARG REPOSITORIES_HASHICORP_GPG='https://apt.releases.hashicorp.com/gpg'
ARG REPOSITORIES_HASHICORP_ENTRY='https://apt.releases.hashicorp.com $(lsb_release -cs) main'
ARG REPOSITORIES_DOCKER_GPG='https://download.docker.com/linux/ubuntu/gpg'
ARG REPOSITORIES_DOCKER_ENTRY='https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'
ARG REPOSITORIES_MICROSOFT_GPG='https://packages.microsoft.com/keys/microsoft.asc'
ARG REPOSITORIES_MICROSOFT_ENTRY='https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main'

# ARG REPOSITORIES_N

ARG BINARIES_GITHUB_URI='https://api.github.com/repos'
ARG BINARIES_GOOGLE_URI='https://packages.cloud.google.com/apt/dists/cloud-sdk/main/binary-arm64/Packages'

# ARG BINARIES_N

WORKDIR ${WORKDIR}

## repositories
RUN test -n "${REPOSITORIES}" && \
    IFS=';' && \
    for REPOSITORY in ${REPOSITORIES[@]}; do declare -u REPO="${REPOSITORY}" && REPO_GPG=$(eval "echo \$REPOSITORIES_${REPO}_GPG") && REPO_ENTRY=$(eval "eval "echo \$REPOSITORIES_${REPO}_ENTRY"") && \
    curl -fsSL "${REPO_GPG}" | gpg --dearmor | tee "/etc/apt/trusted.gpg.d/${REPOSITORY}.gpg" > /dev/null && apt-add-repository "deb [arch=amd64] ${REPO_ENTRY}"; done || :

## packages
RUN test -n "${PACKAGES}" && \
    IFS=';' && \
    install_packages ${PACKAGES[@]} || :

## binaries
RUN test -n "${BINARIES}" && \
    IFS=';' && \
    for BINARY in ${BINARIES[@]}; do declare -u BINARY_REPO="${BINARY}" && BINARY_URI=$(eval "echo \$BINARIES_${BINARY_REPO}_URI") && BINARY_PACKAGES=$(eval "echo \$BINARIES_${BINARY_REPO}") && \
    if [ "${BINARY_REPO}" = "GITHUB" ]; then for BINARY_PACKAGE in ${BINARY_PACKAGES}; do BINARY_PACKAGE_URI=$(echo "${BINARY_URI}/${BINARY_PACKAGE}" | awk -F '=' '{ if (!$3) {version="/latest"}; printf("%s/releases%s", $1, version)}')  && \
    BINARY_PACKAGE_VERSION=$(echo "${BINARY_PACKAGE}" | awk -F '=' '{print $3".*"$2".tar.gz"}') && \
    BINARY_PACKAGE_URL=$(curl -fsSL "${BINARY_PACKAGE_URI}" | grep -Po '"browser_download_url": "\K.*?(?=\")' | grep -P "${BINARY_PACKAGE_VERSION}") && \
    mkdir -p ./github && curl -SsL --retry 5 "${BINARY_PACKAGE_URL}" | tar xz -C ./github && \
    chmod -R +x ./github/* && mv ./github/* /usr/local/bin/; done; fi && \
    if [ "${BINARY_REPO}" = "GOOGLE" ]; then for BINARY_PACKAGE in ${BINARY_PACKAGES}; do BINARY_PACKAGE_VERSION=$(curl -fSsL "${BINARY_URI}" | grep -P "$(echo "${BINARY_PACKAGE}" | sed 's/=/.*/g')" | cut -d '_' -f2 | sort -n | grep "$(echo "${BINARY_PACKAGE}" | cut -d '=' -f2)" | tail -n1 | cut -d '-' -f1) && \
    BINARY_PACKAGE_URI="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$(echo "${BINARY_PACKAGE}" | cut -d '=' -f1)-${BINARY_PACKAGE_VERSION}-linux-x86_64.tar.gz" && \
    mkdir -p ./google && curl -SsL --retry 5 "${BINARY_PACKAGE_URI}" | tar xz -C ./google && \
    chmod -R +x ./google/* && \
    sh ./google/*/install.sh --quiet --command-completion true --bash-completion true --path-update true; done; fi; done || :

###################################### Tool Config ################################
ARG WORKDIR=/root
ARG REQUIREMENTS
ARG EXTENSIONS

# ARG REQUIREMENTS_N
# ARG EXTENSIONS_N

WORKDIR ${WORKDIR}

## requirements
RUN test -n "${REQUIREMENTS}" && \
    IFS=';' && \
    for REQUIREMENT in ${REQUIREMENTS[@]}; do IFS='' && declare -u REQ="${REQUIREMENT}" && REQUIREMENTS_REQ=$(eval "echo \$REQUIREMENTS_${REQ}") && \
    IFS=';' && \
    if [ "${REQ}" = "PIP" ]; then for REQUIREMENT_REQ in ${REQUIREMENTS_REQ[@]}; do pip3 install --no-cache-dir $(echo "${REQUIREMENT_REQ}" | sed 's/=/==/g');done;  fi && \
    if [ "${REQ}" = "ANSIBLE" ]; then for REQUIREMENT_REQ in ${REQUIREMENTS_ANSIBLE_ROLES[@]}; do ansible-galaxy install $(echo "${REQUIREMENT_REQ}" | sed 's/=/,/g'); done && \
    for REQUIREMENT_REQ in ${REQUIREMENTS_ANSIBLE_COLLECTIONS[@]}; do ansible-galaxy collection install $(echo "${REQUIREMENT_REQ}" | sed 's/=/:/g'); done; fi; done || :

## extensions
RUN test -n "${EXTENSIONS}" && \
    IFS=';' && \
    for EXTENSION in ${EXTENSIONS[@]}; do IFS='' && declare -u EXT="${EXTENSION}" && EXTENSIONS_EXT=$(eval "echo \$EXTENSIONS_${EXT}") && \
    IFS=';' && \
    if [ "${EXT}" = "AZ" ]; then for EXTENSION_EXT in ${EXTENSIONS_EXT[@]}; do az extension add -y --name $(echo "${EXTENSION_EXT}" | sed 's/=/ --version /g'); done; fi && \
    if [ "${EXT}" = "GOOGLE" ]; then for EXTENSION_EXT in ${EXTENSIONS_EXT[@]}; do ./google/*/bin/gcloud components install "${EXTENSION_EXT}" && $(echo "${EXTENSION_EXT}" | sed 's/.*=/gcloud components update --version /g'); done; fi && \
    if [ "${EXT}" = "HELM" ]; then for EXTENSION_EXT in ${EXTENSIONS_EXT[@]}; do helm plugin install $(echo "${EXTENSION_EXT}" | sed 's/=/ --version=/g'); done; fi; done || :

################################ Post Build Config ################################
ARG WORKDIR=/root
ARG PROFILES
ARG POST_BUILD_COMMANDS

# ARG PROFILES_N

WORKDIR ${WORKDIR}
CMD ["/bin/bash"]

## profiles
RUN test -n "${PROFILES}" && \
    IFS=';' && \
    for PROFILE in ${PROFILES[@]}; do IFS='' && PR_PROFILE=$(echo "${PROFILE}" | tr -d '.') && declare -u PR="${PR_PROFILE}" && PROFILES_PR=$(eval "echo \$PROFILES_${PR}") && \
    IFS=';' && \
    for PROFILE_PR in ${PROFILES_PR[@]}; do echo "${PROFILE_PR}" >> "${PROFILE}"; done; done || :

## post_build_commands
RUN test -n "${POST_BUILD_COMMANDS}" && \
    IFS=';' && \
    for POST_BUILD_COMMAND in ${POST_BUILD_COMMANDS[@]}; do "${POST_BUILD_COMMAND}"; done || :
